/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     interFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         0.2;

deltaT          5E-05;

writeControl    adjustableRunTime;

writeInterval   0.001;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep on;

maxCo	            5;
maxAlphaCo	    5;
maxDeltaT	    0.1;




// ************************************************************************* //

libs (
      "libOpenFOAM.so"
      "libsimpleSwakFunctionObjects.so"
      "libswakFunctionObjects.so"
      "libgroovyBC.so"
      "libforces.so"
     );

functions
{  
    Q_alpha_out_1
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_1;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_1
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_1;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_2
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_2;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_2
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_2;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_3
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_3;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_3
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_3;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_4
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_4;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_4
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_4;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_5
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_5;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_5
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_5;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_6
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_6;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_6
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_6;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_7
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_7;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_7
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_7;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_out_8
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_8;
        aliases{alpha alpha.water;}
        expression      " alpha * phi ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_out_8
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       outlet_side_8;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_alpha_in
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       inlet;
        aliases{alpha alpha.water;}
        expression      " phi * alpha ";
        accumulations   ( sum );
        outputInterval  1;
    }
    Q_invAlpha_in
    {
        type            swakExpression;
        valueType       patch;
        verbose         true;
        patchName       inlet;
        aliases{alpha alpha.water;}
        expression      " phi * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    volumeAlpha
    {
        type            swakExpression;
        valueType       internalField;
        verbose         true;
        aliases{alpha alpha.water;}
        expression      " vol() * alpha ";
        accumulations   ( sum );
        outputInterval  1;
    }

    
    volumeInvAlpha
    {
        type            swakExpression;
        valueType       internalField;
        verbose         true;
        aliases{alpha alpha.water;}
        expression      " vol() * (1.-alpha) ";
        accumulations   ( sum );
        outputInterval  1;
    }
    volume
    {
        type            swakExpression;
        valueType       internalField;
        verbose         true;
        aliases{alpha alpha.water;}
        expression      " vol() ";
        accumulations   ( sum );
        outputInterval  1;
    }
    
    
    forces
    {
        type            forces;
        libs            ( "libforces.so" );
        outputControl   timeStep;
        outputInterval  1;
        patches         ( span );
        rho             rhoInf;
        log             true;
        rhoInf          997;
        CofR            ( 0 0 0 );
    }
    Co1
    {
        type            CourantNo;
        libs            ( fieldFunctionObjects );
        rho             rho;
        writeControl    writeTime;
    }

        
    //turbulent simulations

    yPlus1
    {
        type            yPlus;
        libs            ( fieldFunctionObjects );
        writeControl    writeTime;
    }
    
    wallShearStress
    {
        type            wallShearStress;
        libs            ( fieldFunctionObjects );
        patches         ( );
        writeControl    writeTime;
    }
}
